#!/usr/bin/env python3
"""
SwinIR ËÆ≠ÁªÉ‰ªªÂä°ÂàÜÊûêÂ∑•ÂÖ∑
ÂàÜÊûêÂΩìÂâçÁº∫Â§±ÁöÑÊ®°ÂûãÔºåËØÜÂà´ÈúÄË¶ÅËÆ≠ÁªÉÁöÑ‰ªªÂä°
"""

import os
from pathlib import Path
from collections import defaultdict

# Ê®°ÂûãÁõÆÂΩï
MODEL_DIR = "model_zoo/swinir"

# ÂÆåÊï¥ÁöÑÂÆòÊñπÊ®°ÂûãÂàóË°®ÂèäÂÖ∂ËÆ≠ÁªÉÈÖçÁΩÆ
OFFICIAL_MODELS = {
    # ÁªèÂÖ∏ÂõæÂÉèË∂ÖÂàÜËæ®Áéá
    "classical_sr": {
        "DIV2K_s48": {
            "001_classicalSR_DIV2K_s48w8_SwinIR-M_x2.pth": {
                "scale": 2, "dataset": "DIV2K", "patch_size": 48, "window_size": 8,
                "training_data": "DIV2K (800 images)", "model_size": "Middle"
            },
            "001_classicalSR_DIV2K_s48w8_SwinIR-M_x3.pth": {
                "scale": 3, "dataset": "DIV2K", "patch_size": 48, "window_size": 8,
                "training_data": "DIV2K (800 images)", "model_size": "Middle"
            },
            "001_classicalSR_DIV2K_s48w8_SwinIR-M_x4.pth": {
                "scale": 4, "dataset": "DIV2K", "patch_size": 48, "window_size": 8,
                "training_data": "DIV2K (800 images)", "model_size": "Middle"
            },
            "001_classicalSR_DIV2K_s48w8_SwinIR-M_x8.pth": {
                "scale": 8, "dataset": "DIV2K", "patch_size": 48, "window_size": 8,
                "training_data": "DIV2K (800 images)", "model_size": "Middle"
            },
        },
        "DF2K_s64": {
            "001_classicalSR_DF2K_s64w8_SwinIR-M_x2.pth": {
                "scale": 2, "dataset": "DF2K", "patch_size": 64, "window_size": 8,
                "training_data": "DIV2K + Flickr2K (2650 images)", "model_size": "Middle"
            },
            "001_classicalSR_DF2K_s64w8_SwinIR-M_x3.pth": {
                "scale": 3, "dataset": "DF2K", "patch_size": 64, "window_size": 8,
                "training_data": "DIV2K + Flickr2K (2650 images)", "model_size": "Middle"
            },
            "001_classicalSR_DF2K_s64w8_SwinIR-M_x4.pth": {
                "scale": 4, "dataset": "DF2K", "patch_size": 64, "window_size": 8,
                "training_data": "DIV2K + Flickr2K (2650 images)", "model_size": "Middle"
            },
            "001_classicalSR_DF2K_s64w8_SwinIR-M_x8.pth": {
                "scale": 8, "dataset": "DF2K", "patch_size": 64, "window_size": 8,
                "training_data": "DIV2K + Flickr2K (2650 images)", "model_size": "Middle"
            },
        }
    },
    
    # ËΩªÈáèÁ∫ßÂõæÂÉèË∂ÖÂàÜËæ®Áéá
    "lightweight_sr": {
        "DIV2K_s64": {
            "002_lightweightSR_DIV2K_s64w8_SwinIR-S_x2.pth": {
                "scale": 2, "dataset": "DIV2K", "patch_size": 64, "window_size": 8,
                "training_data": "DIV2K (800 images)", "model_size": "Small"
            },
            "002_lightweightSR_DIV2K_s64w8_SwinIR-S_x3.pth": {
                "scale": 3, "dataset": "DIV2K", "patch_size": 64, "window_size": 8,
                "training_data": "DIV2K (800 images)", "model_size": "Small"
            },
            "002_lightweightSR_DIV2K_s64w8_SwinIR-S_x4.pth": {
                "scale": 4, "dataset": "DIV2K", "patch_size": 64, "window_size": 8,
                "training_data": "DIV2K (800 images)", "model_size": "Small"
            },
        }
    },
    
    # ÁúüÂÆû‰∏ñÁïåÂõæÂÉèË∂ÖÂàÜËæ®Áéá
    "real_sr": {
        "BSRGAN_DFO": {
            "003_realSR_BSRGAN_DFO_s64w8_SwinIR-M_x4_GAN.pth": {
                "scale": 4, "dataset": "DFO", "patch_size": 64, "window_size": 8,
                "training_data": "DIV2K + Flickr2K + OST", "model_size": "Middle", "use_gan": True
            },
        },
        "BSRGAN_DFOWMFC": {
            "003_realSR_BSRGAN_DFOWMFC_s64w8_SwinIR-L_x4_GAN.pth": {
                "scale": 4, "dataset": "DFOWMFC", "patch_size": 64, "window_size": 8,
                "training_data": "DIV2K + Flickr2K + OST + WED + FFHQ + Manga109 + SCUT-CTW1500", 
                "model_size": "Large", "use_gan": True
            },
        }
    },
    
    # ÁÅ∞Â∫¶ÂõæÂÉèÂéªÂô™
    "gray_denoising": {
        "DFWB_s128": {
            "004_grayDN_DFWB_s128w8_SwinIR-M_noise15.pth": {
                "noise_level": 15, "dataset": "DFWB", "patch_size": 128, "window_size": 8,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle"
            },
            "004_grayDN_DFWB_s128w8_SwinIR-M_noise25.pth": {
                "noise_level": 25, "dataset": "DFWB", "patch_size": 128, "window_size": 8,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle"
            },
            "004_grayDN_DFWB_s128w8_SwinIR-M_noise50.pth": {
                "noise_level": 50, "dataset": "DFWB", "patch_size": 128, "window_size": 8,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle"
            },
        }
    },
    
    # ÂΩ©Ëâ≤ÂõæÂÉèÂéªÂô™
    "color_denoising": {
        "DFWB_s128": {
            "005_colorDN_DFWB_s128w8_SwinIR-M_noise15.pth": {
                "noise_level": 15, "dataset": "DFWB", "patch_size": 128, "window_size": 8,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle"
            },
            "005_colorDN_DFWB_s128w8_SwinIR-M_noise25.pth": {
                "noise_level": 25, "dataset": "DFWB", "patch_size": 128, "window_size": 8,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle"
            },
            "005_colorDN_DFWB_s128w8_SwinIR-M_noise50.pth": {
                "noise_level": 50, "dataset": "DFWB", "patch_size": 128, "window_size": 8,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle"
            },
        }
    },
    
    # JPEGÂéãÁº©‰º™ÂΩ±ÂáèÂ∞ë
    "jpeg_car": {
        "grayscale": {
            "006_CAR_DFWB_s126w7_SwinIR-M_jpeg10.pth": {
                "jpeg_quality": 10, "dataset": "DFWB", "patch_size": 126, "window_size": 7,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle", "color": "grayscale"
            },
            "006_CAR_DFWB_s126w7_SwinIR-M_jpeg20.pth": {
                "jpeg_quality": 20, "dataset": "DFWB", "patch_size": 126, "window_size": 7,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle", "color": "grayscale"
            },
            "006_CAR_DFWB_s126w7_SwinIR-M_jpeg30.pth": {
                "jpeg_quality": 30, "dataset": "DFWB", "patch_size": 126, "window_size": 7,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle", "color": "grayscale"
            },
            "006_CAR_DFWB_s126w7_SwinIR-M_jpeg40.pth": {
                "jpeg_quality": 40, "dataset": "DFWB", "patch_size": 126, "window_size": 7,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle", "color": "grayscale"
            },
        },
        "color": {
            "006_colorCAR_DFWB_s126w7_SwinIR-M_jpeg10.pth": {
                "jpeg_quality": 10, "dataset": "DFWB", "patch_size": 126, "window_size": 7,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle", "color": "color"
            },
            "006_colorCAR_DFWB_s126w7_SwinIR-M_jpeg20.pth": {
                "jpeg_quality": 20, "dataset": "DFWB", "patch_size": 126, "window_size": 7,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle", "color": "color"
            },
            "006_colorCAR_DFWB_s126w7_SwinIR-M_jpeg30.pth": {
                "jpeg_quality": 30, "dataset": "DFWB", "patch_size": 126, "window_size": 7,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle", "color": "color"
            },
            "006_colorCAR_DFWB_s126w7_SwinIR-M_jpeg40.pth": {
                "jpeg_quality": 40, "dataset": "DFWB", "patch_size": 126, "window_size": 7,
                "training_data": "DIV2K + Flickr2K + BSD500 + WED", "model_size": "Middle", "color": "color"
            },
        }
    }
}

def check_existing_models():
    """Ê£ÄÊü•Â∑≤Â≠òÂú®ÁöÑÊ®°Âûã"""
    model_dir = Path(MODEL_DIR)
    if not model_dir.exists():
        return set()
    
    existing = set()
    for model_file in model_dir.glob("*.pth"):
        # Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞èÔºåËøáÊª§ÊéâÂèØËÉΩÊçüÂùèÁöÑÊñá‰ª∂
        if model_file.stat().st_size < 1024 * 1024:  # Â∞è‰∫é1MBÁöÑÊñá‰ª∂ÂèØËÉΩÊçüÂùè
            print(f"‚ö†Ô∏è  ÂèëÁé∞ÂèØËÉΩÊçüÂùèÁöÑÊ®°ÂûãÊñá‰ª∂: {model_file.name} (Â§ßÂ∞è: {model_file.stat().st_size} bytes)")
        else:
            existing.add(model_file.name)
    
    return existing

def analyze_missing_tasks():
    """ÂàÜÊûêÁº∫Â§±ÁöÑËÆ≠ÁªÉ‰ªªÂä°"""
    existing_models = check_existing_models()
    
    print("üîç SwinIR ËÆ≠ÁªÉ‰ªªÂä°ÂàÜÊûêÊä•Âëä")
    print("=" * 60)
    print(f"üìÅ ÂΩìÂâçÂ∑≤ÊúâÊúâÊïàÊ®°Âûã: {len(existing_models)} ‰∏™")
    print()
    
    missing_by_task = defaultdict(list)
    total_models = 0
    missing_count = 0
    
    # ÂàÜÊûêÊØè‰∏™‰ªªÂä°Á±ªÂà´
    for task_name, task_configs in OFFICIAL_MODELS.items():
        print(f"üìã {task_name.upper().replace('_', ' ')} ‰ªªÂä°:")
        print("-" * 40)
        
        task_total = 0
        task_missing = 0
        
        for config_name, models in task_configs.items():
            for model_name, model_info in models.items():
                total_models += 1
                task_total += 1
                
                if model_name in existing_models:
                    status = "‚úÖ Â∑≤Êúâ"
                else:
                    status = "‚ùå Áº∫Â§±"
                    missing_count += 1
                    task_missing += 1
                    missing_by_task[task_name].append({
                        "model_name": model_name,
                        "config": model_info
                    })
                
                # ÊòæÁ§∫Ê®°Âûã‰ø°ÊÅØ
                print(f"  {model_name}")
                print(f"    Áä∂ÊÄÅ: {status}")
                
                # ÊòæÁ§∫ËÆ≠ÁªÉÈÖçÁΩÆ
                config_str = []
                for key, value in model_info.items():
                    if key != "training_data":
                        config_str.append(f"{key}={value}")
                print(f"    ÈÖçÁΩÆ: {', '.join(config_str)}")
                print(f"    Êï∞ÊçÆ: {model_info.get('training_data', 'N/A')}")
                print()
        
        completion_rate = ((task_total - task_missing) / task_total * 100) if task_total > 0 else 0
        print(f"  üìä ÂÆåÊàêÂ∫¶: {task_total - task_missing}/{task_total} ({completion_rate:.1f}%)")
        print()
    
    # ÊÄª‰ΩìÁªüËÆ°
    print("üìä ÊÄª‰ΩìÁªüËÆ°:")
    print("-" * 40)
    print(f"ÂÆòÊñπÊ®°ÂûãÊÄªÊï∞: {total_models}")
    print(f"Â∑≤ÊúâÊ®°ÂûãÊï∞Èáè: {total_models - missing_count}")
    print(f"Áº∫Â§±Ê®°ÂûãÊï∞Èáè: {missing_count}")
    print(f"ÊÄª‰ΩìÂÆåÊàêÂ∫¶: {(total_models - missing_count) / total_models * 100:.1f}%")
    print()
    
    # ËÆ≠ÁªÉ‰ºòÂÖàÁ∫ßÂª∫ËÆÆ
    print("üéØ ËÆ≠ÁªÉ‰ºòÂÖàÁ∫ßÂª∫ËÆÆ:")
    print("-" * 40)
    
    # È´ò‰ºòÂÖàÁ∫ßÔºöÂÆåÂÖ®Áº∫Â§±ÁöÑ‰ªªÂä°Á±ªÂûã
    high_priority = []
    medium_priority = []
    low_priority = []
    
    for task_name, missing_models in missing_by_task.items():
        task_configs = OFFICIAL_MODELS[task_name]
        total_in_task = sum(len(models) for models in task_configs.values())
        missing_in_task = len(missing_models)
        
        if missing_in_task == total_in_task:
            # ÂÆåÂÖ®Áº∫Â§±
            high_priority.extend(missing_models)
        elif missing_in_task > total_in_task * 0.5:
            # Â§ßÈÉ®ÂàÜÁº∫Â§±
            medium_priority.extend(missing_models)
        else:
            # Â∞ëÈÉ®ÂàÜÁº∫Â§±
            low_priority.extend(missing_models)
    
    if high_priority:
        print("üî¥ È´ò‰ºòÂÖàÁ∫ß (ÂÆåÂÖ®Áº∫Â§±ÁöÑ‰ªªÂä°Á±ªÂûã):")
        for item in high_priority:
            print(f"  - {item['model_name']}")
        print()
    
    if medium_priority:
        print("üü° ‰∏≠‰ºòÂÖàÁ∫ß (Â§ßÈÉ®ÂàÜÁº∫Â§±ÁöÑ‰ªªÂä°Á±ªÂûã):")
        for item in medium_priority:
            print(f"  - {item['model_name']}")
        print()
    
    if low_priority:
        print("üü¢ ‰Ωé‰ºòÂÖàÁ∫ß (Â∞ëÈÉ®ÂàÜÁº∫Â§±ÁöÑ‰ªªÂä°Á±ªÂûã):")
        for item in low_priority:
            print(f"  - {item['model_name']}")
        print()
    
    # ËÆ≠ÁªÉÂª∫ËÆÆ
    print("üí° ËÆ≠ÁªÉÂª∫ËÆÆ:")
    print("-" * 40)
    print("1. ‰ºòÂÖàËÆ≠ÁªÉËΩªÈáèÁ∫ßË∂ÖÂàÜËæ®ÁéáÊ®°Âûã (ÂÆåÂÖ®Áº∫Â§±)")
    print("2. Ë°•ÂÖÖÁªèÂÖ∏Ë∂ÖÂàÜËæ®ÁéáÁöÑÂ∏∏Áî®ÂÄçÊï∞ (2x, 8x)")
    print("3. ËÆ≠ÁªÉÁúüÂÆû‰∏ñÁïåË∂ÖÂàÜËæ®ÁéáÂ§ßÂûãÊ®°Âûã")
    print("4. Ë°•ÂÖÖ‰∏çÂêåÂô™Â£∞Ê∞¥Âπ≥ÁöÑÂéªÂô™Ê®°Âûã")
    print("5. Ë°•ÂÖÖ‰∏çÂêåJPEGË¥®ÈáèÁöÑÂéãÁº©‰º™ÂΩ±ÂáèÂ∞ëÊ®°Âûã")
    print()
    print("üìö ËÆ≠ÁªÉ‰ª£Á†Å‰ΩçÁΩÆ: https://github.com/cszn/KAIR")
    print("üìñ ËÆ≠ÁªÉÊñáÊ°£: https://github.com/cszn/KAIR/blob/master/docs/README_SwinIR.md")

if __name__ == "__main__":
    analyze_missing_tasks()
