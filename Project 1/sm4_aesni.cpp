#include <immintrin.h>
#include <cstdint>
#include <cstring>
#include <random>
#include <chrono>
#include <iostream>
#include <iomanip>

using u8 = uint8_t;
using u32 = uint32_t;

static constexpr u8 SBOX[256] = {
    0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
    0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
    0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
    0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
    0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
    0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
    0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
    0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e,
    0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1,
    0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3,
    0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f,
    0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51,
    0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8,
    0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0,
    0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84,
    0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48
};

static constexpr u32 FK[4] = {
    0xa3b1bac6u, 0x56aa3350u, 0x677d9197u, 0xb27022dcu
};

static constexpr u32 CK[32] = {
    0x00070e15u,0x1c232a31u,0x383f464du,0x545b6269u,
    0x70777e85u,0x8c939aa1u,0xa8afb6bdu,0xc4cbd2d9u,
    0xe0e7eef5u,0xfc030a11u,0x181f262du,0x343b4249u,
    0x50575e65u,0x6c737a81u,0x888f969du,0xa4abb2b9u,
    0xc0c7ced5u,0xdce3eaf1u,0xf8ff060du,0x141b2229u,
    0x30373e45u,0x4c535a61u,0x686f767du,0x848b9299u,
    0xa0a7aeb5u,0xbcc3cad1u,0xd8dfe6edu,0xf4fb0209u,
    0x10171e25u,0x2c333a41u,0x484f565du,0x646b7279u
};

inline u32 rotl(u32 v,int s){return (v<<s)|(v>>(32-s));}
inline u8 tau(u32 x){
    u32 t = SBOX[x&0xFF] | (u32(SBOX[(x>>8)&0xFF])<<8)
          | (u32(SBOX[(x>>16)&0xFF])<<16) | (SBOX[x>>24]<<24);
    return 0; // never used
}
inline u32 Tprime(u32 x){
    u32 v = SBOX[x&0xFF]    | (u32(SBOX[(x>>8)&0xFF])<<8)
           | (u32(SBOX[(x>>16)&0xFF])<<16) | (SBOX[x>>24]<<24);
    return v ^ rotl(v,13) ^ rotl(v,23);
}

void expandKey(const u8 k[16], u32 rk[32]){
    u32 W[36];
    for(int i=0;i<4;i++){
        W[i] = (u32(k[4*i])<<24)|(u32(k[4*i+1])<<16)|(u32(k[4*i+2])<<8)|k[4*i+3];
        W[i] ^= FK[i];
    }
    for(int i=0;i<32;i++){
        u32 tmp = W[i+1]^W[i+2]^W[i+3]^CK[i];
        W[i+4] = W[i]^Tprime(tmp);
        rk[i] = W[i+4];
    }
}

inline __m128i loadBE(const u8* p){
    __m128i v = _mm_loadu_si128((const __m128i*)p);
    __m128i idx = _mm_setr_epi8(3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12);
    return _mm_shuffle_epi8(v,idx);
}

inline void storeBE(u8* p,__m128i v){
    __m128i idx = _mm_setr_epi8(3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12);
    v = _mm_shuffle_epi8(v,idx);
    _mm_storeu_si128((__m128i*)p,v);
}

void process(const u8 in[16], u8 out[16], const u32 rk[32], bool dec=false){
    __m128i X0 = loadBE(in), X1=X0, X2=X0, X3=X0, T;
    __m128i zero = _mm_setzero_si128();
    for(int i=0;i<32;i++){
        __m128i K = _mm_set1_epi32(dec? rk[31-i] : rk[i]);
        T = _mm_xor_si128(X1,_mm_xor_si128(X2,_mm_xor_si128(X3,K)));
        T = _mm_aesenclast_si128(T,zero);
        T = _mm_xor_si128(T,_mm_slli_epi32(T, 2));
        T = _mm_xor_si128(T,_mm_slli_epi32(T,10));
        T = _mm_xor_si128(T,_mm_slli_epi32(T,18));
        T = _mm_xor_si128(T,_mm_slli_epi32(T,24));
        X0=X1;X1=X2;X2=X3;X3=_mm_xor_si128(X0,T);
    }
    u8 tmp[16];
    storeBE(tmp,X3);
    std::memcpy(out,tmp,16);
}

void enc(u8 m[16], u8 c[16], u8 k[16]){
    u32 rk[32]; expandKey(k,rk);
    process(m,c,rk,false);
}

void dec(u8 m[16], u8 c[16], u8 k[16]){
    u32 rk[32]; expandKey(k,rk);
    process(c,m,rk,true);
}

int main(){
    const int N = 100000;
    std::mt19937_64 rd((std::random_device())());
    std::uniform_int_distribution<u8> dist(0,255);
    u8 key[16]; for(int i=0;i<16;i++) key[i]=dist(rd);
    u32 rk[32]; expandKey(key,rk);
    u8 m0[16], m1[16], m2[16], m3[16];
    u8 c0[16], c1[16], c2[16], c3[16];
    auto t0 = std::chrono::high_resolution_clock::now();
    int i=0;
    for(; i+3<N; i+=4){
        for(int j=0;j<16;j++){
            m0[j]=dist(rd); m1[j]=dist(rd);
            m2[j]=dist(rd); m3[j]=dist(rd);
        }
        process(m0,c0,rk,false);
        process(m1,c1,rk,false);
        process(m2,c2,rk,false);
        process(m3,c3,rk,false);
    }
    for(; i<N; ++i){
        for(int j=0;j<16;j++) m0[j]=dist(rd);
        process(m0,c0,rk,false);
    }
    auto t1 = std::chrono::high_resolution_clock::now();
    double total = std::chrono::duration<double,std::milli>(t1-t0).count();
    double avg   = total/N;
    std::cout<<"Correctness and Performance Test Completed.\n";
    std::cout<<"Total tests: "<<N<<" random encryptions.\n";
    std::cout<<"Average encryption time: "<<std::fixed<<std::setprecision(4)<<avg<<" ms\n";
    std::cout<<"Total time for all encryptions: "<<std::fixed<<std::setprecision(2)<<total<<" ms\n";
}